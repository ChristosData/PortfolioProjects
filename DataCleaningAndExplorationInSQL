/*
In this project we conduct data cleaning and data exploration of housing data.

Skills used:

JOINS, String Functions, Window Functions, (IS)NULL Functions, CASE Statements, CTE's, Aggregate Functions, Aliases, Rank, Count, Slicing Data using NTILE 

*/


Select *
From Projects.dbo.Housing

--------------------------------------------------------------------------------------------------------------------------

-- Standardise Date Format
--Original table has time as 00:00:00.000 on all rows for saleDate column, we want to remove this

Select saleDate
From Projects.dbo.Housing

ALTER TABLE Housing
ALTER COLUMN [SaleDate] date

--Confirming the changes have been made to the table

select saledate
from Projects.dbo.Housing


 --------------------------------------------------------------------------------------------------------------------------

-- Populate Property Address data

Select *
From Projects.dbo.Housing
Where PropertyAddress is null
order by ParcelID


--Creating a self-join to compare values for exact matches
Select a.ParcelID, a.PropertyAddress, b.ParcelID, b.PropertyAddress, ISNULL(a.PropertyAddress,b.PropertyAddress)
From Projects.dbo.Housing a
JOIN Projects.dbo.Housing b
	on a.ParcelID = b.ParcelID
	AND a.[UniqueID ] <> b.[UniqueID ]
Where a.PropertyAddress is null


Update a
SET PropertyAddress = ISNULL(a.PropertyAddress,b.PropertyAddress)
From Projects.dbo.Housing a
JOIN Projects.dbo.Housing b
	on a.ParcelID = b.ParcelID
	AND a.[UniqueID ] <> b.[UniqueID ]
Where a.PropertyAddress is null

--Running the self-join query again to confirm the null values have been filled with their respective addresses


--------------------------------------------------------------------------------------------------------------------------

-- Breaking out Address into Individual Columns (Address, City, State)


Select PropertyAddress
From Projects.dbo.Housing
--Where PropertyAddress is null
--order by ParcelID

--separating the address by the delimiter ,
SELECT
SUBSTRING(PropertyAddress, 1, CHARINDEX(',', PropertyAddress) -1 ) as Address
, SUBSTRING(PropertyAddress, CHARINDEX(',', PropertyAddress) + 1 , LEN(PropertyAddress)) as Address

From Projects.dbo.Housing

--creating a new column to add the split address 
ALTER TABLE Housing
Add PropertySplitAddress Nvarchar(255);

Update Housing
SET PropertySplitAddress = SUBSTRING(PropertyAddress, 1, CHARINDEX(',', PropertyAddress) -1 )

--creating a new column to add the split city
ALTER TABLE Housing
Add PropertySplitCity Nvarchar(255);

Update Housing
SET PropertySplitCity = SUBSTRING(PropertyAddress, CHARINDEX(',', PropertyAddress) + 1 , LEN(PropertyAddress))


Select *
From Projects.dbo.Housing


Select OwnerAddress
From Projects.dbo.Housing

--using PARSENAME for limiters. Replace the comma with a period since PARSENAME only works with periods.
--this splits the full address into street address, city and state.
Select
PARSENAME(REPLACE(OwnerAddress, ',', '.') , 3)
,PARSENAME(REPLACE(OwnerAddress, ',', '.') , 2)
,PARSENAME(REPLACE(OwnerAddress, ',', '.') , 1)
From Projects.dbo.Housing



ALTER TABLE Housing
Add OwnerSplitAddress Nvarchar(255);

Update Housing
SET OwnerSplitAddress = PARSENAME(REPLACE(OwnerAddress, ',', '.') , 3)


ALTER TABLE Housing
Add OwnerSplitCity Nvarchar(255);

Update Housing
SET OwnerSplitCity = PARSENAME(REPLACE(OwnerAddress, ',', '.') , 2)



ALTER TABLE Housing
Add OwnerSplitState Nvarchar(255);

Update Housing
SET OwnerSplitState = PARSENAME(REPLACE(OwnerAddress, ',', '.') , 1)



Select *
From Projects.dbo.Housing




--------------------------------------------------------------------------------------------------------------------------


-- Change Y and N to Yes and No in "Sold as Vacant" field


Select Distinct(SoldAsVacant), Count(SoldAsVacant) as CountResult
From Projects.dbo.Housing
Group by SoldAsVacant
order by 2


Select SoldAsVacant
, CASE When SoldAsVacant = 'Y' THEN 'Yes'
	   When SoldAsVacant = 'N' THEN 'No'
	   ELSE SoldAsVacant
	   END
From Projects.dbo.Housing


Update Housing
SET SoldAsVacant = CASE When SoldAsVacant = 'Y' THEN 'Yes'
	   When SoldAsVacant = 'N' THEN 'No'
	   ELSE SoldAsVacant
	   END

--checking our results
Select Distinct(SoldAsVacant), Count(SoldAsVacant) as CountResult
From Projects.dbo.Housing
Group by SoldAsVacant
order by 2


-----------------------------------------------------------------------------------------------------------------------------------------------------------

-- Remove Duplicates

WITH RowNumCTE AS(
Select *,
	ROW_NUMBER() OVER (
	PARTITION BY ParcelID,
				 PropertyAddress,
				 SalePrice,
				 SaleDate,
				 LegalReference
				 ORDER BY
					UniqueID
					) row_num

From Projects.dbo.Housing

)
Select *
--DELETE
--Use DELETE instead of Select * after confirming the duplicates to remove them from the database
From RowNumCTE
Where row_num > 1
--Order by PropertyAddress

--Running the above CTE query after deleting duplicates to confirm there are no more duplicates



Select *
From Projects.dbo.Housing



---------------------------------------------------------------------------------------------------------

-- Delete Unused Columns



Select *
From Projects.dbo.Housing


ALTER TABLE Projects.dbo.Housing
DROP COLUMN OwnerAddress, TaxDistrict, PropertyAddress, SaleDate

---------------------------------------------------------------------------------------------------------
/*
--Begin Data Exploration

*/


--viewing all the data 
select *
from Projects.dbo.Housing

--selecting relevant data that we will begin exploring
--taking a total count of all the different land use 
select landuse, count(landuse) as totalcount
from Projects.dbo.Housing
group by landuse
order by totalcount  desc

--looking at landuse where the count exceeds 100 to narrow results
select landuse, count(landuse) as totalcount
from Projects.dbo.Housing
group by landuse
having count(landuse)>100
order by totalcount  desc

---Listing top 5 land use using a CTE, with an average sale price of each land use, ordering by rank and displaying total count  
with  Landcount as
(
select landuse, round(avg(saleprice),0) as averagesaleprice,
rank()  over (order by count(landuse) desc) as rank,
count(landuse) as totalcount
from Projects.dbo.Housing
group by landuse
)


select landuse, averagesaleprice, rank, totalcount
from Landcount 
where rank<=5 
order by rank

--calculating the average house price across the entire table

select round(avg(saleprice),0) as avgsaleprice
from Projects.dbo.housing


--finding out the top 5% of house prices by sale price using NTILE window function in a CTE to split the saleprice into 20 slices total, 5% each
With SalesPriceData as
(
select uniqueID,SaleDateConverted, SalePrice, OwnerName, Acreage, Bedrooms, FullBath,  OwnerSplitAddress, OwnerSplitCity, OwnerSplitState,
NTILE(20) OVER (ORDER BY saleprice DESC) AS  'NTile'
from Projects.dbo.Housing
)

select  *
from SalesPriceData
where NTILE  = 1

--Average house price of the top 5% of houses by saleprice
select round(avg(saleprice),0) as avgpricetop5percent
from SalesPriceData
where NTILE = 1

--using the NTILE function we can now view the results for other slices, for example top 10% by changing the where statement to <=2. 
--we can also alter the slice value into quarters by running NTILE(4) and viewing the data by top 25%, 50%, 75%, 100%





