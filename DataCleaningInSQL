/*
Cleaning Data using SQL Queries

*/


Select *
From Projects.dbo.Housing

--------------------------------------------------------------------------------------------------------------------------

-- Standardise Date Format
--Original table has time as 00:00:00.000 on all rows for saleDate column, we want to remove this

Select saleDate
From Projects.dbo.Housing

ALTER TABLE Housing
ALTER COLUMN [SaleDate] date

--Confirming the changes have been made to the table

select saledate
from Projects.dbo.Housing


 --------------------------------------------------------------------------------------------------------------------------

-- Populate Property Address data

Select *
From Projects.dbo.Housing
Where PropertyAddress is null
order by ParcelID


--Creating a self-join to compare values for exact matches
Select a.ParcelID, a.PropertyAddress, b.ParcelID, b.PropertyAddress, ISNULL(a.PropertyAddress,b.PropertyAddress)
From Projects.dbo.Housing a
JOIN Projects.dbo.Housing b
	on a.ParcelID = b.ParcelID
	AND a.[UniqueID ] <> b.[UniqueID ]
Where a.PropertyAddress is null


Update a
SET PropertyAddress = ISNULL(a.PropertyAddress,b.PropertyAddress)
From Projects.dbo.Housing a
JOIN Projects.dbo.Housing b
	on a.ParcelID = b.ParcelID
	AND a.[UniqueID ] <> b.[UniqueID ]
Where a.PropertyAddress is null

--Running the self-join query again to confirm the null values have been filled with their respective addresses


--------------------------------------------------------------------------------------------------------------------------

-- Breaking out Address into Individual Columns (Address, City, State)


Select PropertyAddress
From Projects.dbo.Housing
--Where PropertyAddress is null
--order by ParcelID

--separating the address by the delimiter ,
SELECT
SUBSTRING(PropertyAddress, 1, CHARINDEX(',', PropertyAddress) -1 ) as Address
, SUBSTRING(PropertyAddress, CHARINDEX(',', PropertyAddress) + 1 , LEN(PropertyAddress)) as Address

From Projects.dbo.Housing

--creating a new column to add the split address 
ALTER TABLE Housing
Add PropertySplitAddress Nvarchar(255);

Update Housing
SET PropertySplitAddress = SUBSTRING(PropertyAddress, 1, CHARINDEX(',', PropertyAddress) -1 )

--creating a new column to add the split city
ALTER TABLE Housing
Add PropertySplitCity Nvarchar(255);

Update Housing
SET PropertySplitCity = SUBSTRING(PropertyAddress, CHARINDEX(',', PropertyAddress) + 1 , LEN(PropertyAddress))


Select *
From Projects.dbo.Housing


Select OwnerAddress
From Projects.dbo.Housing

--using PARSENAME for limiters. Replace the comma with a period since PARSENAME only works with periods.
--this splits the full address into street address, city and state.
Select
PARSENAME(REPLACE(OwnerAddress, ',', '.') , 3)
,PARSENAME(REPLACE(OwnerAddress, ',', '.') , 2)
,PARSENAME(REPLACE(OwnerAddress, ',', '.') , 1)
From Projects.dbo.Housing



ALTER TABLE Housing
Add OwnerSplitAddress Nvarchar(255);

Update Housing
SET OwnerSplitAddress = PARSENAME(REPLACE(OwnerAddress, ',', '.') , 3)


ALTER TABLE Housing
Add OwnerSplitCity Nvarchar(255);

Update Housing
SET OwnerSplitCity = PARSENAME(REPLACE(OwnerAddress, ',', '.') , 2)



ALTER TABLE Housing
Add OwnerSplitState Nvarchar(255);

Update Housing
SET OwnerSplitState = PARSENAME(REPLACE(OwnerAddress, ',', '.') , 1)



Select *
From Projects.dbo.Housing




--------------------------------------------------------------------------------------------------------------------------


-- Change Y and N to Yes and No in "Sold as Vacant" field


Select Distinct(SoldAsVacant), Count(SoldAsVacant) as CountResult
From Projects.dbo.Housing
Group by SoldAsVacant
order by 2


Select SoldAsVacant
, CASE When SoldAsVacant = 'Y' THEN 'Yes'
	   When SoldAsVacant = 'N' THEN 'No'
	   ELSE SoldAsVacant
	   END
From Projects.dbo.Housing


Update Housing
SET SoldAsVacant = CASE When SoldAsVacant = 'Y' THEN 'Yes'
	   When SoldAsVacant = 'N' THEN 'No'
	   ELSE SoldAsVacant
	   END

--checking our results
Select Distinct(SoldAsVacant), Count(SoldAsVacant) as CountResult
From Projects.dbo.Housing
Group by SoldAsVacant
order by 2


-----------------------------------------------------------------------------------------------------------------------------------------------------------

-- Remove Duplicates

WITH RowNumCTE AS(
Select *,
	ROW_NUMBER() OVER (
	PARTITION BY ParcelID,
				 PropertyAddress,
				 SalePrice,
				 SaleDate,
				 LegalReference
				 ORDER BY
					UniqueID
					) row_num

From Projects.dbo.Housing

)
Select *
--DELETE
--Use DELETE instead of Select * after confirming the duplicates to remove them from the database
From RowNumCTE
Where row_num > 1
--Order by PropertyAddress

--Running the above CTE query after deleting duplicates to confirm there are no more duplicates



Select *
From Projects.dbo.Housing



---------------------------------------------------------------------------------------------------------

-- Delete Unused Columns



Select *
From Projects.dbo.Housing


ALTER TABLE Projects.dbo.Housing
DROP COLUMN OwnerAddress, TaxDistrict, PropertyAddress, SaleDate


